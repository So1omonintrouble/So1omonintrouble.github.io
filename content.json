{"meta":{"title":"Rov's blog","subtitle":"记录学习生活","description":"","author":"Rov","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2021-01-13T11:06:34.000Z","updated":"2021-01-13T12:57:11.968Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-01-13T07:19:02.000Z","updated":"2021-01-13T07:19:55.277Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2021-01-13T11:06:13.000Z","updated":"2021-01-16T12:12:11.120Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"¶作者介绍 学生，现就读于兰州交通大学电气工程及其自动化专业本科，对计算机的学习有着浓厚的兴趣。 ¶创建目的 为更深刻的学习 笔者认为学习知识不能使单方面的由老师教授，学生接受，而是应有学生在接受过老师的讲授之后，再由自己亲身地去输出传达的知识，以使自己对知识本身有着更深刻的了解（即相当于学生本身也成为了老师） 为个人的坚持 笔者虽对电脑学习有着比较高昂的兴趣，类似于爬虫，机器学习，python，matlab算法等等，网上学习的复杂性使得笔者很难搞清楚自己究竟想要哪一个方面的学习，而dota2，csgo的“学习”又让笔者耗费了大量的时间，故想尝试通过自己输出知识来强迫自己坚持学习 为知识的共享 就拿专业课知识来讲，现在的，近一学期的专业课知识，对笔者来讲，有太多的知识点在baidu，在Google是找不到的，多数情况下出现问题，只能通过问老师，问学长学姐，论坛等待回答等这些比较不容易快速得到答案的方式来解决问题，而如果我们建立自己专业课的常见或日常问题在各个搜索引擎上的索引，是不是就可以更方便的帮助到他人，帮助当自己呢？ ¶对未来的期望 目前的网页只是暂时的，希望过不了多久，我的网页也可以像网上那些大牛一样，先把头像做出来，评论，对话框，背景，动态什么的一一都有，那样的话，也就差不多成型了。"}],"posts":[{"title":"","slug":"schedule","date":"2021-04-09T11:10:35.842Z","updated":"2021-04-10T14:00:45.293Z","comments":true,"path":"2021/04/09/schedule/","link":"","permalink":"http://example.com/2021/04/09/schedule/","excerpt":"","text":"头脑风暴 ¶想完成什么 美剧无障碍观影，先从有英文字幕开始 专业课学习超出考试 锻炼跑步 ¶感兴趣的东西 &lt;教父&gt; python爬虫-最感兴趣的！！！ 专业课（怎么说呢，其实不是很感兴趣，但可以先从试题入手） ¶怎么做 早上在图书馆那边找教室（4教）有课就走，及时止损 早上英语单词，有课就晚上学（8：00-12：00） 中午专业课（2：30-6：00）不回宿舍，在朝阳吃 晚上python爬虫（7：30-9：30）跑步（9：50-10：30） ¶2021.4.8进度 python爬虫p18 中间 开始远动学习 完成英语单词 ¶2021.4.9进度 完成英语单词 完成英语口语背诵 看了一会&lt;教父&gt;，但觉得其他比较短的剧更适合，比如&lt;摩登家庭&gt; 还没开始电力工程基础学习 plc作业完成 python爬虫p22中间 完成跑步 ¶2021.4.10进度 完成英语单词 python爬虫完成从网站获取数据到提取有用数据过程，接下来开始导出到excel表及数据库以便进行数据分析 rainy day","categories":[],"tags":[]},{"title":"电力系统变电站","slug":"电力系统变电所","date":"2021-04-04T16:00:00.000Z","updated":"2021-04-05T12:13:31.056Z","comments":true,"path":"2021/04/05/电力系统变电所/","link":"","permalink":"http://example.com/2021/04/05/%E7%94%B5%E5%8A%9B%E7%B3%BB%E7%BB%9F%E5%8F%98%E7%94%B5%E6%89%80/","excerpt":"","text":"电力系统变电站分类 ¶按地位分 ¶配图 ¶枢纽变电所 ¶作用 枢纽变电所电压等级高，供电范围广，在系统中处于举足轻重的地位，全所停电后，将引起系统解列，造成大区域停电，甚至造成电力系统瓦解，使社会的运行处于瘫痪状态。 ¶所处位置 位于电力系统的枢纽点，连接电力系统中的高压和中压的几个部分， 汇集多个电源。 ¶常用电压等级 220kV及以上 ¶中间变电所 ¶作用 该变电所以交换潮流为主，起系统功率交换的作用，或使长距离输电 线路分段， 一般汇集 2～3 个电源， 同时有降压给当地用户供电， 这样的变电所全所停电后， 将引起区域网络的解列，造成大面积停电。 ¶所处位置 位于系统主干环行线路或系统主要干线的接口处。 ¶常用电压等级 电压等级一般为330～220kV ¶地区变电所 ¶作用 高压侧一般为 220~110 干伏，它是对地区用户供电为主的变电所，全所停电后，将使地区中断电源。 ¶所处位置 将远处的高压电力转送到较远的负荷中心，还同时降压后向当地和邻近地区供电。在电网高电压的变电站中，除少数地区为枢纽变电站外，其余均为区域变电站。 ¶常用电压等级 35kV及以上330kV以下 ¶终端变电所 ¶作用 经降压后直接给用户供电。终端变电所全所停电后，将使用户中断电源。终端变电站是单独建造的终端变电所，是用电单位或者用户前端的第一个变电站，终端变电站出来的电直接供给用户用电设备使用，而不需再次经过变电站变压。 ¶所处位置 处于输电线路的终端，接近负荷点。 ¶常用电压等级 高压侧一般为 35~110 kV，10kV/0.4kV的变压器并不算终端变电站，其属于配电变压器。 ¶工厂企业内部的车间变电所 ¶配图 ¶露天变电所 变压器位于露天地面之上的变电所 ¶半露天变电所 变压器位于露天地面之上的变电所，但变压器上方有顶板或挑檐 ¶附设变电所 变电所的一面或数面墙与建筑物的墙共用，且变压器室的门和通风窗向建筑物外开 ¶车间内变电所 位于车间内部的变电所，且变压器室的门向车间内开 ¶独立变电所 为一独立建筑物 ¶室内变电所 附设变电所，独立变电所和车间内变电所的总称 ¶按照用途分 升压变电所 降压变电所 ¶按照控制操作方式分 有人值班变电所 无人值班变电所 ¶按照结构形式分 室外变电所 室内变电所 箱式变电所 ¶按照地理条件分 地上变电所 地下变电所","categories":[{"name":"专业课","slug":"专业课","permalink":"http://example.com/categories/%E4%B8%93%E4%B8%9A%E8%AF%BE/"}],"tags":[{"name":"电力工程基础","slug":"电力工程基础","permalink":"http://example.com/tags/%E7%94%B5%E5%8A%9B%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80/"}]},{"title":"日常在ios/ipados上播放本地音乐(脱离在线播放器)","slug":"日常在ios-ipados上播放本地音乐-脱离在线播放器","date":"2021-01-30T04:08:29.000Z","updated":"2021-02-04T14:55:52.380Z","comments":true,"path":"2021/01/30/日常在ios-ipados上播放本地音乐-脱离在线播放器/","link":"","permalink":"http://example.com/2021/01/30/%E6%97%A5%E5%B8%B8%E5%9C%A8ios-ipados%E4%B8%8A%E6%92%AD%E6%94%BE%E6%9C%AC%E5%9C%B0%E9%9F%B3%E4%B9%90-%E8%84%B1%E7%A6%BB%E5%9C%A8%E7%BA%BF%E6%92%AD%E6%94%BE%E5%99%A8/","excerpt":"","text":"前言 音乐作为现代娱乐生活中的一个部分，在我看来相当重要，而音乐播放软体的选择则令人大费周折，笔者用过网易云，qq音乐，酷狗音乐，apple music， 还有spotify。也经历了从mp3听歌到后来的手机、平板听歌的转变，由于考虑到各方面的因素，首先是歌曲的版权，笔者发现以上播放器的版权无一可以满足笔者对自己喜欢歌曲的需求，尤其是梦想的声音综艺节目上的歌曲在网易云，apple music ，spotify 上均无，而在其他软体上又难以找到笔者已购的独立游戏soundtrack，其次在价格上，国内软体又普遍需要二次购买最新的数字专辑，同样价格也不菲，让本来就不富裕的家庭更是雪上加霜😭。 故而，我选择了先在本地下载然后使用本地播放器的方式进行播放。 简述 下载通过酷我音乐破解版windows，上传和播放通过ios/ipados生态下的ever play，即可实现免费听任意歌曲。 详细内容 ¶音乐下载器 酷我音乐破解版windows下载地址： 链接：https://pan.baidu.com/s/1MXIpspEHOtW46rbIAeKnmA 提取码：solo 下载完之后安装打开搜索自己喜欢的音乐即可完全免费下载（无需登录） ¶音乐播放器 ¶下载 ever play下载地址（ios/ipados生态）：链接：https://apps.apple.com/cn/app/id1202642773 ¶介绍 ever play是一款免费使用的本地音乐播放软体，其包含付费功能总结就是 可以播放高清音乐文件（目前还没有使用过该功能，下载的最高音质歌曲也是无法达到该水平的） 音乐可视化（可以试用，个人感受一般） 更改专辑封面图片（强迫症可能需要，就像我用过的网易云那样） ¶歌曲上传 有三种上传方式分别是使用电脑iTunes文件共享，AirDrop隔空投送，以及我们接下来单推的Wi-Fi传输。 在ever play 软体中进入设置Wi-Fi传输 在同一WiFi的前提下，使用windows浏览器输入以下地址 进入网页后 上传成功之后即可在ios/ipados端听歌了","categories":[{"name":"practice","slug":"practice","permalink":"http://example.com/categories/practice/"}],"tags":[{"name":"music","slug":"music","permalink":"http://example.com/tags/music/"}]},{"title":"第二天复习python","slug":"第二天复习python","date":"2021-01-17T04:48:49.000Z","updated":"2021-01-17T15:30:19.547Z","comments":true,"path":"2021/01/17/第二天复习python/","link":"","permalink":"http://example.com/2021/01/17/%E7%AC%AC%E4%BA%8C%E5%A4%A9%E5%A4%8D%E4%B9%A0python/","excerpt":"","text":"¶字符串 ¶表达方式 单引号 12word = &#x27;字符串&#x27;print(word) 双引号 12sentence =&quot;这是一个句子&quot;print(sentence) 三引号 12345paragraphs =&#x27;&#x27;&#x27; 起飞&#x27;&#x27;&#x27;print(paragraphs)#自动识别制表符空格回车 ¶转义字符 1234my_str =&#x27;I\\&#x27;m a student&#x27;print(my_str)my_str =&quot;Jason said \\&quot; I like you \\&quot;&quot;print(my_str) \\n \\t \\&quot; \\’ ¶5种输出方式 123456str=&quot;chengdu&quot;print(str[0])#单个print(str[0:6])#0~5print(str[1:7:2])#1~6（隔2）print(str[5:])#后面全部print(str[:5])#前面全部 ¶较为特殊 12345print(str + &quot;,你好&quot;)print((str +&#x27;\\t&#x27;)* 3)print(r&quot;hello\\nchengdu&quot;) #r的作用 $$ easypeasy! $$ ¶列表 ¶表达方式 123456789101112namelist =[]namelist =[&quot;小张&quot;,&quot;小王&quot;,&quot;小李&quot;]print(namelist[0])testlist =[1,&quot;测试&quot;]print(type(testlist[0]))print(type(testlist[1]))for name in namelist: print(name)for i in range(0,len(namelist)): print(namelist[i]) ¶增加 1234567891011print(&quot;---增加前，名单列表的数据&quot;)for name in namelist: print(name)nametemp= input(&quot;&quot;)namelist.append(nametemp)for name in namelist: print(name)a=[1,2]b=[3,4]a.append(b)#直接在a列表增加一个列表print(a) 12a.extend(b)#把b分解为单个然后加入aprint(a) ¶插入 123a=[0, 1 ,2]a.insert(1,3)#在1顺序插入3print(a) ¶删除 1234moviename =[&quot;theendoffuckingworld&quot;,&quot;the ring of king&quot;,&quot;furious &amp; fast&quot;]print(moviename)del moviename[2]#指定删除print(moviename) 12moviename.pop()#弹栈最后的元素print(moviename) 123456moviename.remove(&quot;theendoffuckingworld&quot;)#遍历删除print(moviename)moviename=[&quot;theendoffuckingworld&quot;,&quot;the ring of king&quot;,&quot;the ring of king&quot;,&quot;furious &amp; fast&quot;]print(moviename)moviename.remove(&quot;the ring of king&quot;)#遍历删除print(moviename) ¶修改 12moviename[1]=&quot;wuhu&quot;print(moviename) ¶查找 1234if &quot;wuhu&quot; in moviename: print(&quot;1&quot;)else : print(&quot;0&quot;) ¶精确查找 12345a= [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;,&quot;b&quot;]print(a.index(&quot;a&quot;,1,4))# 1~4范围内查找且左闭右开[1,4)for i in range(0,3): #[0,3) print(a[i]) ¶计数 1print(a.count(&quot;b&quot;)) ¶反转 12a.reverse()print(a) ¶排序 1234a.sort()#升序print(a)a.sort(reverse=True)#降序print(a) ¶类似于嵌套 12schoolname=[[&quot;1&quot;,&quot;2&quot;],[],[]]print(schoolname[0][1]) ¶实例（办公室选人） 12345678910111213141516import randomprint(random.randint(1,3))offices =[[],[],[]]names=[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;]for name in names: index = random.randint(0,2) offices[index].append(name)i = 1for office in offices: print(&quot;办公室%d人数为：%d&quot;%(i,len(office))) i+=1 for name in office: print(&quot;%s&quot;%name,end=&quot;\\t&quot;) print(&quot;\\n&quot;) print(&quot;-&quot;*20) 输出的%d要注意一一对应 否则会出现TypeError: not all arguments converted during string formatting的低级问题","categories":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/categories/%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"第一天复习python","slug":"第一天复习python","date":"2021-01-15T19:05:54.358Z","updated":"2021-01-17T15:30:21.851Z","comments":true,"path":"2021/01/16/第一天复习python/","link":"","permalink":"http://example.com/2021/01/16/%E7%AC%AC%E4%B8%80%E5%A4%A9%E5%A4%8D%E4%B9%A0python/","excerpt":"","text":"¶重新下载pycharm 对pycharm进行一些设置 12345# -*- coding =utf-8 -*-# @time : 2021/1/16 1:51# @Author : Rov# @File : co1.py# @Software : PyCharm ¶简单输出 123print(&quot;hello world!&quot;)a = 10print(&quot;这是一个变量&quot;,a) ¶关键字 12keyword.kwlist[&#x27;False&#x27;, &#x27;None&#x27;, &#x27;True&#x27;, &#x27;__peg_parser__&#x27;, &#x27;and&#x27;, &#x27;as&#x27;, &#x27;assert&#x27;, &#x27;async&#x27;, &#x27;await&#x27;, &#x27;break&#x27;, &#x27;class&#x27;, &#x27;continue&#x27;, &#x27;def&#x27;, &#x27;del&#x27;, &#x27;elif&#x27;, &#x27;else&#x27;, &#x27;except&#x27;, &#x27;finally&#x27;, &#x27;for&#x27;, &#x27;from&#x27;, &#x27;global&#x27;, &#x27;if&#x27;, &#x27;import&#x27;, &#x27;in&#x27;, &#x27;is&#x27;, &#x27;lambda&#x27;, &#x27;nonlocal&#x27;, &#x27;not&#x27;, &#x27;or&#x27;, &#x27;pass&#x27;, &#x27;raise&#x27;, &#x27;return&#x27;, &#x27;try&#x27;, &#x27;while&#x27;, &#x27;with&#x27;, &#x27;yield&#x27;] ¶输出传值 12age = 18print(&quot;我的年纪是:%d岁&quot;%age) %d %s很关键（s是字符串） ¶格式化输出 1print(&quot;我的名字是%s,我的国籍是%s&quot;%(&quot;小张&quot;,&quot;中国&quot;)) 12345print(&quot;www&quot;,&quot;baidu&quot;,&quot;com&quot;,sep=&quot;.&quot;)print(&quot;hello&quot;,end=&quot;&quot;)print(&quot;world&quot;,end=&quot;\\t&quot;)print(&quot;python&quot;,end=&quot;\\n&quot;)print(&quot;end&quot;) ¶输入 12a=input(&quot;输入：&quot;)print(type(a)) 无论是什么都是字符串 1&lt;class &#x27;str&#x27;&gt; ¶转化 123a=int(&quot;123&quot;)b=a+100print(b) ¶运算符 123+ - * / %== %等于!= %不等 ¶逻辑运算符 12and or not in /not in ¶判断语句 1234567if 判断条件1 : 执行语句1elif 判断语句2 : 执行语句2else: 执行语句3 后面的冒号很关键!!! ezpz ¶随机数 12345import randomx= random.randint(0,2)print(x)print(random.uniform(0,2)) randint：整数 uniform：小数 ¶循环语句 1234for i in range(5): print(i)for i in range(0,10,3): print(i) 如果是 12for i in range(a,b) print(i) 则其范围为a~b-1 对于字符串 123name =&quot;be nice&quot;for i in name: print(i,end=&quot;&quot;) while 12345while i&lt;5: print(&quot;nice play!&quot;) print(&quot;i=%d&quot;%i) i+=1print(&quot;pass&quot;)","categories":[{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/categories/%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"About","slug":"index","date":"2021-01-13T11:06:13.000Z","updated":"2021-01-16T12:12:11.120Z","comments":true,"path":"2021/01/13/index/","link":"","permalink":"http://example.com/2021/01/13/index/","excerpt":"","text":"¶作者介绍 学生，现就读于兰州交通大学电气工程及其自动化专业本科，对计算机的学习有着浓厚的兴趣。 ¶创建目的 为更深刻的学习 笔者认为学习知识不能使单方面的由老师教授，学生接受，而是应有学生在接受过老师的讲授之后，再由自己亲身地去输出传达的知识，以使自己对知识本身有着更深刻的了解（即相当于学生本身也成为了老师） 为个人的坚持 笔者虽对电脑学习有着比较高昂的兴趣，类似于爬虫，机器学习，python，matlab算法等等，网上学习的复杂性使得笔者很难搞清楚自己究竟想要哪一个方面的学习，而dota2，csgo的“学习”又让笔者耗费了大量的时间，故想尝试通过自己输出知识来强迫自己坚持学习 为知识的共享 就拿专业课知识来讲，现在的，近一学期的专业课知识，对笔者来讲，有太多的知识点在baidu，在Google是找不到的，多数情况下出现问题，只能通过问老师，问学长学姐，论坛等待回答等这些比较不容易快速得到答案的方式来解决问题，而如果我们建立自己专业课的常见或日常问题在各个搜索引擎上的索引，是不是就可以更方便的帮助到他人，帮助当自己呢？ ¶对未来的期望 目前的网页只是暂时的，希望过不了多久，我的网页也可以像网上那些大牛一样，先把头像做出来，评论，对话框，背景，动态什么的一一都有，那样的话，也就差不多成型了。","categories":[],"tags":[]}],"categories":[{"name":"专业课","slug":"专业课","permalink":"http://example.com/categories/%E4%B8%93%E4%B8%9A%E8%AF%BE/"},{"name":"practice","slug":"practice","permalink":"http://example.com/categories/practice/"},{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/categories/%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"电力工程基础","slug":"电力工程基础","permalink":"http://example.com/tags/%E7%94%B5%E5%8A%9B%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80/"},{"name":"music","slug":"music","permalink":"http://example.com/tags/music/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]}